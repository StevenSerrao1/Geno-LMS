// <auto-generated />
using System;
using Geno_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Geno_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250130081450_UpdatedDbContext2")]
    partial class UpdatedDbContext2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Geno_API.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("CreatedByAdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UpdatedByAdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("CreatedByAdminId");

                    b.HasIndex("Description");

                    b.HasIndex("Title");

                    b.HasIndex("UpdatedByAdminId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CreatedByAdminId = 1,
                            CreatedDate = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(3002),
                            Description = "A short course dedicated to helping you master the basics of the latest version of C#.",
                            Title = "Introduction to C#"
                        },
                        new
                        {
                            CourseId = 2,
                            CreatedByAdminId = 1,
                            CreatedDate = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(3005),
                            Description = "Get your baking on with this intermediate course on creating the perfect DOH!Nut.",
                            Title = "Advanced Doughnut Making"
                        });
                });

            modelBuilder.Entity("Geno_API.Entities.Enrolment", b =>
                {
                    b.Property<int>("EnrolmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrolmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrolmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrolmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("Enrolments", (string)null);

                    b.HasData(
                        new
                        {
                            EnrolmentId = 1,
                            CourseId = 1,
                            EnrolmentDate = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(3036),
                            StudentId = 2
                        },
                        new
                        {
                            EnrolmentId = 2,
                            CourseId = 2,
                            EnrolmentDate = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(3038),
                            StudentId = 2
                        },
                        new
                        {
                            EnrolmentId = 3,
                            CourseId = 2,
                            EnrolmentDate = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(3039),
                            StudentId = 3
                        },
                        new
                        {
                            EnrolmentId = 4,
                            CourseId = 1,
                            EnrolmentDate = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(3040),
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("Geno_API.Entities.FinalGrade", b =>
                {
                    b.Property<int>("FinalGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalGradeId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("DenormalizedCourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FinalScore")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("FinalGradeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FinalScore");

                    b.HasIndex("StudentId");

                    b.ToTable("FinalGrades", (string)null);
                });

            modelBuilder.Entity("Geno_API.Entities.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("GradeScore")
                        .HasColumnType("float");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("GradeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeScore");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades", (string)null);
                });

            modelBuilder.Entity("Geno_API.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByAdminId")
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedByAdminId");

                    b.HasIndex("Description");

                    b.HasIndex("LessonName");

                    b.HasIndex("QuizId")
                        .IsUnique();

                    b.HasIndex("UpdatedByAdminId");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("Geno_API.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Geno_API.Entities.QuestionOption", b =>
                {
                    b.Property<int>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionOptionId"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionOptionLetter")
                        .HasColumnType("int");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions", (string)null);
                });

            modelBuilder.Entity("Geno_API.Entities.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int?>("CreatedByAdminId")
                        .HasColumnType("int");

                    b.Property<long>("MaxScore")
                        .HasColumnType("bigint");

                    b.Property<long>("PassingScore")
                        .HasColumnType("bigint");

                    b.Property<string>("QuizDescription")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedByAdminId")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.HasIndex("CreatedByAdminId");

                    b.HasIndex("MaxScore");

                    b.HasIndex("PassingScore");

                    b.HasIndex("QuizName");

                    b.HasIndex("UpdatedByAdminId");

                    b.ToTable("Quizzes", (string)null);
                });

            modelBuilder.Entity("Geno_API.Entities.SelectedAnswer", b =>
                {
                    b.Property<int>("SelectedAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SelectedAnswerId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedAnswerLetter")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SelectedAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentId");

                    b.ToTable("SelectedAnswers", (string)null);
                });

            modelBuilder.Entity("Geno_API.Entities.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Geno_API.Entities.Users.Admin", b =>
                {
                    b.HasBaseType("Geno_API.Entities.Users.User");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DateOfBirth = new DateTime(2000, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "stevenserraowork@gmail.com",
                            FirstName = "Steven",
                            LastName = "Serrao",
                            Role = "Admin",
                            DateJoined = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(2722)
                        });
                });

            modelBuilder.Entity("Geno_API.Entities.Users.Student", b =>
                {
                    b.HasBaseType("Geno_API.Entities.Users.User");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.HasIndex("AdminId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            DateOfBirth = new DateTime(1980, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zugzwang@gmail.com",
                            FirstName = "Spencer",
                            LastName = "Reid",
                            Role = "Student",
                            AdminId = 1,
                            DateJoined = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(2960)
                        },
                        new
                        {
                            UserId = 3,
                            DateOfBirth = new DateTime(1956, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doh@hotmail.com",
                            FirstName = "Homer",
                            LastName = "Simpson",
                            Role = "Student",
                            AdminId = 1,
                            DateJoined = new DateTime(2025, 1, 30, 8, 14, 48, 927, DateTimeKind.Utc).AddTicks(2963)
                        });
                });

            modelBuilder.Entity("Geno_API.Entities.Course", b =>
                {
                    b.HasOne("Geno_API.Entities.Users.Admin", "CreatedByAdmin")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Geno_API.Entities.Users.Admin", "UpdatedByAdmin")
                        .WithMany("UpdatedCourses")
                        .HasForeignKey("UpdatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByAdmin");

                    b.Navigation("UpdatedByAdmin");
                });

            modelBuilder.Entity("Geno_API.Entities.Enrolment", b =>
                {
                    b.HasOne("Geno_API.Entities.Course", "Course")
                        .WithMany("Enrolments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geno_API.Entities.Users.Student", "Student")
                        .WithMany("Enrolments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Geno_API.Entities.FinalGrade", b =>
                {
                    b.HasOne("Geno_API.Entities.Course", "Course")
                        .WithMany("FinalGrades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Geno_API.Entities.Users.Student", "Student")
                        .WithMany("FinalGrades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Geno_API.Entities.Grade", b =>
                {
                    b.HasOne("Geno_API.Entities.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId");

                    b.HasOne("Geno_API.Entities.Quiz", "Quiz")
                        .WithMany("Grades")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Geno_API.Entities.Users.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Geno_API.Entities.Lesson", b =>
                {
                    b.HasOne("Geno_API.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geno_API.Entities.Users.Admin", "CreatedByAdmin")
                        .WithMany("CreatedLessons")
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Geno_API.Entities.Quiz", "Quiz")
                        .WithOne("Lesson")
                        .HasForeignKey("Geno_API.Entities.Lesson", "QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geno_API.Entities.Users.Admin", "UpdatedByAdmin")
                        .WithMany("UpdatedLessons")
                        .HasForeignKey("UpdatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Course");

                    b.Navigation("CreatedByAdmin");

                    b.Navigation("Quiz");

                    b.Navigation("UpdatedByAdmin");
                });

            modelBuilder.Entity("Geno_API.Entities.Question", b =>
                {
                    b.HasOne("Geno_API.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Geno_API.Entities.QuestionOption", b =>
                {
                    b.HasOne("Geno_API.Entities.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Geno_API.Entities.Quiz", b =>
                {
                    b.HasOne("Geno_API.Entities.Users.Admin", "CreatedByAdmin")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Geno_API.Entities.Users.Admin", "UpdatedByAdmin")
                        .WithMany("UpdatedQuizzes")
                        .HasForeignKey("UpdatedByAdminId");

                    b.Navigation("CreatedByAdmin");

                    b.Navigation("UpdatedByAdmin");
                });

            modelBuilder.Entity("Geno_API.Entities.SelectedAnswer", b =>
                {
                    b.HasOne("Geno_API.Entities.Question", "Question")
                        .WithMany("SelectedAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geno_API.Entities.Users.Student", "Student")
                        .WithMany("SelectedAnswers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Geno_API.Entities.Users.Admin", b =>
                {
                    b.HasOne("Geno_API.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("Geno_API.Entities.Users.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geno_API.Entities.Users.Student", b =>
                {
                    b.HasOne("Geno_API.Entities.Users.Admin", "Admin")
                        .WithMany("Students")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Geno_API.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("Geno_API.Entities.Users.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Geno_API.Entities.Course", b =>
                {
                    b.Navigation("Enrolments");

                    b.Navigation("FinalGrades");

                    b.Navigation("Grades");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Geno_API.Entities.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("SelectedAnswers");
                });

            modelBuilder.Entity("Geno_API.Entities.Quiz", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Lesson");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Geno_API.Entities.Users.Admin", b =>
                {
                    b.Navigation("CreatedCourses");

                    b.Navigation("CreatedLessons");

                    b.Navigation("CreatedQuizzes");

                    b.Navigation("Students");

                    b.Navigation("UpdatedCourses");

                    b.Navigation("UpdatedLessons");

                    b.Navigation("UpdatedQuizzes");
                });

            modelBuilder.Entity("Geno_API.Entities.Users.Student", b =>
                {
                    b.Navigation("Enrolments");

                    b.Navigation("FinalGrades");

                    b.Navigation("Grades");

                    b.Navigation("SelectedAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
